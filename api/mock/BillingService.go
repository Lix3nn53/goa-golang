// Code generated by MockGen. DO NOT EDIT.
// Source: UserService.go

// Package mock is a generated GoMock package.
package mock

import (
	"github.com/golang/mock/gomock"
	"goa-golang/app/model/billingModel"
	"goa-golang/app/model/userModel"
	"reflect"
)

// MockAuthServiceUseCase is a mock of UserUseCase interface
type MockServiceBillingCase struct {
	ctrl     *gomock.Controller
	recorder *MockBillingUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthServiceUseCase
type MockBillingUseCaseMockRecorder struct {
	mock *MockServiceBillingCase
}

// NewMockBillingServiceCase creates a new mock instance
func NewMockBillingServiceCase(ctrl *gomock.Controller) *MockServiceBillingCase {
	mock := &MockServiceBillingCase{ctrl: ctrl}
	mock.recorder = &MockBillingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceBillingCase) EXPECT() *MockBillingUseCaseMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockServiceBillingCase) AddBilling(user userModel.User, payment billingModel.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBilling", user, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockBillingUseCaseMockRecorder) AddBilling(user interface{}, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBilling", reflect.TypeOf((*MockServiceBillingCase)(nil).AddBilling), user, payment)
}

// Register mocks base method
func (m *MockServiceBillingCase) GetPaymentAdapter(customer billingModel.CreateCustomer) (*billingModel.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentAdapter", customer)
	ret0, _ := ret[0].(*billingModel.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockBillingUseCaseMockRecorder) GetPaymentAdapter(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentAdapter", reflect.TypeOf((*MockServiceBillingCase)(nil).GetPaymentAdapter), customer)
}
