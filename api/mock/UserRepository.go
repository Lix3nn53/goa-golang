// Code generated by MockGen. DO NOT EDIT.
// Source: UserRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	"github.com/golang/mock/gomock"
	"goa-golang/app/model"
	"reflect"
)

// MockBillingPGRepository is a mock of UserPGRepository interface
type MockUserPGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserPGRepositoryMockRecorder
}

// MockBillingPGRepositoryMockRecorder is the mock recorder for MockBillingPGRepository
type MockUserPGRepositoryMockRecorder struct {
	mock *MockUserPGRepository
}

// NewMockBillingPGRepository creates a new mock instance
func NewMockUserPGRepository(ctrl *gomock.Controller) *MockUserPGRepository {
	mock := &MockUserPGRepository{ctrl: ctrl}
	mock.recorder = &MockUserPGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserPGRepository) EXPECT() *MockUserPGRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserPGRepository) Create(cuser model.CreateUser) (user *model.User, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cuser)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserPGRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserPGRepository)(nil).Create), user)
}

// FindById mocks base method
func (m *MockUserPGRepository) FindByID(id int) (user *model.User, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockUserPGRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserPGRepository)(nil).FindByID), id)
}

func (m *MockUserPGRepository) RemoveByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockUserPGRepositoryMockRecorder) RemoveById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserPGRepository)(nil).RemoveByID), id)
}

func (m *MockUserPGRepository) UpdateByID(id int, user model.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockUserPGRepositoryMockRecorder) UpdateById(id interface{}, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserPGRepository)(nil).UpdateByID), id, user)
}
