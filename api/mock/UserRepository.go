// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/repository/userRepository/userRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	userModel "goa-golang/app/model/userModel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockUserRepositoryInterface) AddSession(uuid, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", uuid, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockUserRepositoryInterfaceMockRecorder) AddSession(uuid, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockUserRepositoryInterface)(nil).AddSession), uuid, refreshToken)
}

// CreateWithGoogle mocks base method.
func (m *MockUserRepositoryInterface) CreateWithGoogle(create userModel.CreateUserGoogle) (*userModel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithGoogle", create)
	ret0, _ := ret[0].(*userModel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithGoogle indicates an expected call of CreateWithGoogle.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateWithGoogle(create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithGoogle", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateWithGoogle), create)
}

// CreateWithMicrosoft mocks base method.
func (m *MockUserRepositoryInterface) CreateWithMicrosoft(create userModel.CreateUserMicrosoft) (*userModel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithMicrosoft", create)
	ret0, _ := ret[0].(*userModel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithMicrosoft indicates an expected call of CreateWithMicrosoft.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateWithMicrosoft(create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithMicrosoft", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateWithMicrosoft), create)
}

// FindByID mocks base method.
func (m *MockUserRepositoryInterface) FindByID(id, field string) (*userModel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id, field)
	ret0, _ := ret[0].(*userModel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindByID(id, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindByID), id, field)
}

// GetSessions mocks base method.
func (m *MockUserRepositoryInterface) GetSessions(uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessions", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessions indicates an expected call of GetSessions.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetSessions(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessions", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetSessions), uuid)
}

// RemoveByID mocks base method.
func (m *MockUserRepositoryInterface) RemoveByID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) RemoveByID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).RemoveByID), uuid)
}

// RemoveSession mocks base method.
func (m *MockUserRepositoryInterface) RemoveSession(uuid, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", uuid, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockUserRepositoryInterfaceMockRecorder) RemoveSession(uuid, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockUserRepositoryInterface)(nil).RemoveSession), uuid, refreshToken)
}

// UpdateByID mocks base method.
func (m *MockUserRepositoryInterface) UpdateByID(uuid string, user userModel.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", uuid, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateByID(uuid, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateByID), uuid, user)
}
