// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire

package dic

import (
	"goa-golang/app/controller/authController"
	"goa-golang/app/controller/characterController"
	"goa-golang/app/controller/playerController"
	"goa-golang/app/controller/userController"
	"goa-golang/app/repository/characterRepository"
	"goa-golang/app/repository/playerRepository"
	"goa-golang/app/repository/userRepository"
	"goa-golang/app/service/authService"
	"goa-golang/app/service/characterService"
	"goa-golang/app/service/playerService"
	"goa-golang/app/service/userService"
	"goa-golang/internal/logger"
	"goa-golang/internal/storage"
)

// Injectors from wire.go:

// User
func InitUserRepository(db *storage.DbStore) userRepository.UserRepositoryInterface {
	userRepositoryInterface := userRepository.NewUserRepository(db)
	return userRepositoryInterface
}

func InitUserService(userRepo userRepository.UserRepositoryInterface) userService.UserServiceInterface {
	userServiceInterface := userService.NewUserService(userRepo)
	return userServiceInterface
}

func InitUserController(us userService.UserServiceInterface, logger2 logger.Logger) userController.UserControllerInterface {
	userControllerInterface := userController.NewUserController(us, logger2)
	return userControllerInterface
}

// Player
func InitPlayerRepository(db *storage.DbStore) playerRepository.PlayerRepositoryInterface {
	playerRepositoryInterface := playerRepository.NewPlayerRepository(db)
	return playerRepositoryInterface
}

func InitPlayerService(playerRepo playerRepository.PlayerRepositoryInterface) playerService.PlayerServiceInterface {
	playerServiceInterface := playerService.NewPlayerService(playerRepo)
	return playerServiceInterface
}

func InitPlayerController(ps playerService.PlayerServiceInterface, logger2 logger.Logger) playerController.PlayerControllerInterface {
	playerControllerInterface := playerController.NewPlayerController(ps, logger2)
	return playerControllerInterface
}

// Character
func InitCharacterRepository(db *storage.DbStore) characterRepository.CharacterRepositoryInterface {
	characterRepositoryInterface := characterRepository.NewCharacterRepository(db)
	return characterRepositoryInterface
}

func InitCharacterService(characterRepo characterRepository.CharacterRepositoryInterface) characterService.CharacterServiceInterface {
	characterServiceInterface := characterService.NewCharacterService(characterRepo)
	return characterServiceInterface
}

func InitCharacterController(ps characterService.CharacterServiceInterface, logger2 logger.Logger) characterController.CharacterControllerInterface {
	characterControllerInterface := characterController.NewCharacterController(ps, logger2)
	return characterControllerInterface
}

// Auth
func InitAuthService(playerRepo playerRepository.PlayerRepositoryInterface, userRepo userRepository.UserRepositoryInterface, logger2 logger.Logger) authService.AuthServiceInterface {
	authServiceInterface := authService.NewAuthService(playerRepo, userRepo, logger2)
	return authServiceInterface
}

func InitAuthController(us authService.AuthServiceInterface, logger2 logger.Logger) authController.AuthControllerInterface {
	authControllerInterface := authController.NewAuthController(us, logger2)
	return authControllerInterface
}
